{
    "swagger": "2.0",
    "info": {
        "description": "API Server for ItsPlanned - A Collaborative Event Planning Application. This API provides endpoints for managing events, tasks, user profiles, and integrations with external services like Google Calendar.",
        "title": "ItsPlanned API",
        "contact": {
            "name": "ItsPlanned Support",
            "url": "https://github.com/vl4ddos/itsplanned",
            "email": "support@itsplanned.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/ai/chat": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new AI chat session for the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-assistant"
                ],
                "summary": "Start a new AI chat",
                "responses": {
                    "200": {
                        "description": "Chat started successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.AIChatResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to start chat",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/ai/chat/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the message history for a specific chat",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-assistant"
                ],
                "summary": "Get chat history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat history retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/api.ChatHistoryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not your chat",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch messages",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/ai/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a message to the AI assistant and get a response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai-assistant"
                ],
                "summary": "Send message to AI assistant",
                "parameters": [
                    {
                        "description": "Message details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent and response received",
                        "schema": {
                            "$ref": "#/definitions/api.SendMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to process message",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the URL for Google OAuth authorization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calendar"
                ],
                "summary": "Get Google OAuth URL",
                "responses": {
                    "200": {
                        "description": "OAuth URL generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GoogleOAuthURLResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/google/callback": {
            "get": {
                "description": "Handle the callback from Google OAuth and exchange code for tokens",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calendar"
                ],
                "summary": "Google OAuth callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization code from Google",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens received successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GoogleOAuthCallbackResponse"
                        }
                    },
                    "400": {
                        "description": "Authorization code not provided",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get access token",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/oauth/save": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save the OAuth tokens for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calendar"
                ],
                "summary": "Save OAuth tokens",
                "parameters": [
                    {
                        "description": "OAuth token details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SaveOAuthTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token saved successfully",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload or unauthorized token save attempt",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to save token",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/calendar/import": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Import events from the user's Google Calendar for the next 4 weeks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calendar"
                ],
                "summary": "Import Google Calendar events",
                "responses": {
                    "200": {
                        "description": "Events imported successfully",
                        "schema": {
                            "$ref": "#/definitions/api.ImportCalendarEventsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or no token found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to import events",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all events where the user is a participant",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get user's events",
                "responses": {
                    "200": {
                        "description": "Events retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/api.EventResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new event with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "description": "Event creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.EventResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create event",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/find_best_time_for_day": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Find the best available time slots for an event based on participants' schedules and specified time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Find best time slots for an event",
                "parameters": [
                    {
                        "description": "Find best time slots request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.FindBestTimeSlotsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Time slots found successfully",
                        "schema": {
                            "$ref": "#/definitions/api.FindBestTimeSlotsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a participant of the event",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found or no participants",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/invite": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a unique invite link for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Generate event invite link",
                "parameters": [
                    {
                        "description": "Event ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.GenerateInviteLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invite link generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GenerateInviteLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/join/{invite_code}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Join an event using a unique invite code",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invitations"
                ],
                "summary": "Join event using invite link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invite Code",
                        "name": "invite_code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully joined event",
                        "schema": {
                            "$ref": "#/definitions/api.JoinEventResponse"
                        }
                    },
                    "400": {
                        "description": "Already a participant",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Invalid invite link",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.EventResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a participant of the event",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing event's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update an event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Event update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.EventResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not the organizer",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}/budget": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the budget details for an event, including initial budget, real budget, and difference",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event budget details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Budget details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/api.EventBudgetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}/leaderboard": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the leaderboard for an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event leaderboard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Leaderboard retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/api.EventLeaderboardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Not a participant",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Leaderboard not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}/participants": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of display names of all participants in an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event participants",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of participants' display names",
                        "schema": {
                            "$ref": "#/definitions/api.EventParticipantsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid event ID",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a participant of the event",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout the current user (client-side token removal)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/password/reset": {
            "post": {
                "description": "Reset user password using a valid reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload or token",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/password/reset-request": {
            "post": {
                "description": "Request a password reset token for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset token generated",
                        "schema": {
                            "$ref": "#/definitions/api.PasswordResetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the authenticated user's profile information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ProfileUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to hash password",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all tasks associated with a specific event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get all tasks for an event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tasks retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/api.TaskResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid event ID",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a participant of the event",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new task for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.TaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create task",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get task details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task details retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.TaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid task ID",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a participant of the event",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update details of an existing task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update task details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.TaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not a participant of the event or not the organizer",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{id}/assign": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign the authenticated user to an unassigned task or unassign if already assigned",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Toggle task assignment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task assignment toggled successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.TaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Task already assigned to another user",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{id}/complete": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark a task as completed or uncompleted and update user scores accordingly",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Toggle task completion",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task completion toggled successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/api.TaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not assigned to the task",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AIChatResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-03-16T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "api.AIMessageResponse": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "What theme would you suggest for a birthday party?"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-03-16T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_user": {
                    "type": "boolean",
                    "example": true
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "api.APIResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "error": {
                    "type": "string",
                    "example": "Invalid input"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "user": {
                    "$ref": "#/definitions/api.UserResponse"
                }
            }
        },
        "api.ChatHistoryResponse": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.AIMessageResponse"
                    }
                }
            }
        },
        "api.CreateEventRequest": {
            "type": "object",
            "required": [
                "event_date_time",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Celebrating John's 30th birthday"
                },
                "event_date_time": {
                    "type": "string",
                    "example": "2024-04-01T18:00:00Z"
                },
                "initial_budget": {
                    "type": "number",
                    "example": 1000
                },
                "name": {
                    "type": "string",
                    "example": "Birthday Party"
                },
                "place": {
                    "type": "string",
                    "example": "Central Park"
                }
            }
        },
        "api.CreateTaskRequest": {
            "type": "object",
            "required": [
                "event_id",
                "points",
                "title"
            ],
            "properties": {
                "assigned_to": {
                    "type": "integer",
                    "example": 2
                },
                "budget": {
                    "type": "number",
                    "example": 50
                },
                "description": {
                    "type": "string",
                    "example": "Purchase party decorations from the store"
                },
                "event_id": {
                    "type": "integer",
                    "example": 1
                },
                "points": {
                    "type": "integer",
                    "example": 10
                },
                "title": {
                    "type": "string",
                    "example": "Buy decorations"
                }
            }
        },
        "api.EventBudgetResponse": {
            "type": "object",
            "properties": {
                "difference": {
                    "type": "number",
                    "example": 50
                },
                "initial_budget": {
                    "type": "number",
                    "example": 1000
                },
                "real_budget": {
                    "type": "number",
                    "example": 950
                }
            }
        },
        "api.EventLeaderboardEntry": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer",
                    "example": 1
                },
                "score": {
                    "type": "number",
                    "example": 85.5
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "api.EventLeaderboardResponse": {
            "type": "object",
            "properties": {
                "leaderboard": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.EventLeaderboardEntry"
                    }
                }
            }
        },
        "api.EventParticipantsResponse": {
            "type": "object",
            "properties": {
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"John Doe\"",
                        " \"Jane Smith\"]"
                    ]
                }
            }
        },
        "api.EventResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-03-16T12:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Celebrating John's 30th birthday"
                },
                "event_date_time": {
                    "type": "string",
                    "example": "2024-04-01T18:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "initial_budget": {
                    "type": "number",
                    "example": 1000
                },
                "name": {
                    "type": "string",
                    "example": "Birthday Party"
                },
                "organizer_id": {
                    "type": "integer",
                    "example": 1
                },
                "place": {
                    "type": "string",
                    "example": "Central Park"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-03-16T12:00:00Z"
                }
            }
        },
        "api.FindBestTimeSlotsRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2024-04-01"
                },
                "duration_mins": {
                    "type": "integer",
                    "example": 120
                },
                "end_time": {
                    "type": "string",
                    "example": "22:00"
                },
                "event_id": {
                    "type": "integer",
                    "example": 1
                },
                "start_time": {
                    "type": "string",
                    "example": "08:00"
                }
            }
        },
        "api.FindBestTimeSlotsResponse": {
            "type": "object",
            "properties": {
                "suggestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TimeSlotSuggestion"
                    }
                }
            }
        },
        "api.GenerateInviteLinkRequest": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "api.GenerateInviteLinkResponse": {
            "type": "object",
            "properties": {
                "invite_link": {
                    "type": "string",
                    "example": "http://localhost:8080/events/join/abc123"
                }
            }
        },
        "api.GoogleOAuthCallbackResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "ya29.a0AfB_byC..."
                },
                "expiry": {
                    "type": "string",
                    "example": "2024-03-16T15:04:05Z"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "1//04dK..."
                }
            }
        },
        "api.GoogleOAuthURLResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "example": "https://accounts.google.com/o/oauth2/auth?..."
                }
            }
        },
        "api.ImportCalendarEventsResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Events imported successfully"
                }
            }
        },
        "api.JoinEventResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Successfully joined event"
                }
            }
        },
        "api.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "secretpassword123"
                }
            }
        },
        "api.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "api.PasswordResetRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "api.PasswordResetResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "If the email exists, a reset link will be sent"
                },
                "reset_token": {
                    "type": "string",
                    "example": "abc123def456"
                }
            }
        },
        "api.ProfileUpdateRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "bio": {
                    "type": "string",
                    "example": "Software developer and tech enthusiast"
                },
                "display_name": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "api.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "secretpassword123"
                }
            }
        },
        "api.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string",
                    "example": "newpassword123"
                },
                "token": {
                    "type": "string",
                    "example": "abc123def456"
                }
            }
        },
        "api.SaveOAuthTokenRequest": {
            "type": "object",
            "required": [
                "access_token",
                "expiry",
                "refresh_token",
                "user_id"
            ],
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "ya29.a0AfB_byC..."
                },
                "expiry": {
                    "type": "string",
                    "example": "2024-03-16T15:04:05Z"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "1//04dK..."
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "api.SendMessageRequest": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer",
                    "example": 1
                },
                "message": {
                    "type": "string",
                    "example": "What theme would you suggest for a birthday party?"
                }
            }
        },
        "api.SendMessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Message sent"
                },
                "response": {
                    "$ref": "#/definitions/api.AIMessageResponse"
                }
            }
        },
        "api.TaskResponse": {
            "type": "object",
            "properties": {
                "assigned_to": {
                    "type": "integer",
                    "example": 2
                },
                "budget": {
                    "type": "number",
                    "example": 50
                },
                "description": {
                    "type": "string",
                    "example": "Purchase party decorations from the store"
                },
                "event_id": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_completed": {
                    "type": "boolean",
                    "example": false
                },
                "points": {
                    "type": "integer",
                    "example": 10
                },
                "title": {
                    "type": "string",
                    "example": "Buy decorations"
                }
            }
        },
        "api.TimeSlotSuggestion": {
            "type": "object",
            "properties": {
                "busy_count": {
                    "type": "integer",
                    "example": 2
                },
                "slot": {
                    "type": "string",
                    "example": "2024-04-01 18:00"
                }
            }
        },
        "api.UpdateEventRequest": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "number",
                    "example": 1500
                },
                "description": {
                    "type": "string",
                    "example": "Celebrating John's 30th birthday"
                },
                "event_date_time": {
                    "type": "string",
                    "example": "2024-04-01T18:00:00Z"
                },
                "name": {
                    "type": "string",
                    "example": "Birthday Party"
                },
                "place": {
                    "type": "string",
                    "example": "Central Park"
                }
            }
        },
        "api.UpdateTaskRequest": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "number",
                    "example": 60
                },
                "description": {
                    "type": "string",
                    "example": "Purchase decorations from the party store"
                },
                "points": {
                    "type": "integer",
                    "example": 15
                },
                "title": {
                    "type": "string",
                    "example": "Buy party decorations"
                }
            }
        },
        "api.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "bio": {
                    "type": "string",
                    "example": "Software developer and tech enthusiast"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-03-16T12:00:00Z"
                },
                "display_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-03-16T12:00:00Z"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Authentication endpoints for user registration, login, and password management",
            "name": "auth"
        },
        {
            "description": "User profile management endpoints",
            "name": "profile"
        },
        {
            "description": "Event management endpoints for creating, updating, and managing events",
            "name": "events"
        },
        {
            "description": "Task management endpoints for creating, assigning, and completing tasks",
            "name": "tasks"
        },
        {
            "description": "Event invitation endpoints for generating and using invite links",
            "name": "invitations"
        },
        {
            "description": "AI assistant endpoints for chat-based event planning assistance",
            "name": "ai-assistant"
        },
        {
            "description": "Google Calendar integration endpoints for importing events",
            "name": "calendar"
        }
    ]
}